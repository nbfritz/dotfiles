#!/usr/bin/env ruby

require "thor"
require "open3"

class SVNManager < Thor
  BASE_URL = "https://svn.peace.daveramsey.com/trunk/"
  MAPPINGS = {
    "cfmain"        => ["cfmain",              "daveramsey_com"],
    "cfccomponents" => ["share/cfccomponents", "cfccomponents" ],
    "dr"            => ["dr",                  "dr09"          ],
    "elphub"        => ["dr/sites/elp",        "elphub"        ]
  }

  class_option :verbose, type: :boolean, aliases: :v

  desc "up", "Update all of the folders I care about"
  def up
    cmd = "svn update #{local_paths.join(" ")}"
    puts "==> Running: #{cmd}" if options[:verbose]
    Open3.popen3(cmd) do |i, o, e|
      o.each_line {|l| puts l unless l.match(/^(Fetching external|External at|At revision|$)/) }
    end
  end

  desc "ticket TICKET", "Search log for specific ticket IDs"
  def ticket(ticket)
    revisions = Hash.new {|h,k| h[k] = []}
    local_paths.each do |path|
      cmd = "cd /var/webapps/lampo.trunk && svn log -r {`date -v-3m +%Y-%m-%d`}:{`date -v+1m +%Y-%m-%d`} --search nathan.fritz --search-and T#{ticket} #{path}"
      puts "==> Running: #{cmd}" if options[:verbose]
      Open3.popen3(cmd) do |i, o, e|
        o.each_line do |l| 
          if m = l.match(/^r(\d+) /)
            revisions[m[1]] << path
          end
        end
      end
    end
    revisions.each_pair {|k,v| puts "#{k}: #{v.join(", ")}" }
  end

  private
  def local_paths
    MAPPINGS.map {|k,v| v.first}
  end

  def svn_paths
    MAPPINGS.map {|k,v| v.last}
  end
end

SVNManager.start(ARGV)
